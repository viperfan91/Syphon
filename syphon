#!/bin/bash
# Syphon (A YouTube downloader powered by youtube-dl [http://rg3.github.io/youtube-dl/]) and FFmpeg [http://www.ffmpeg.org]
# Script Written by Calvin Barrie (viperfan91) with contributions by Darrigan
echo

echo 'Initializing...'
# Define CL input
saveMediaType=$1
myTubeURL=$2
#--------------------------------------------------------------------------------------------------------------------------------
#********************************************************************************************************************************
#--------------------------------------------------------------------------------------------------------------------------------
# Check to see if youtube-dl is installed.
# If it is not then ask if the user wants to install it:
youtubedlInstalled=$(youtube-dl -h > /dev/null 2>&1; echo $?)
if [ "$youtubedlInstalled" != "1" ]; then
	if [ "$youtubedlInstalled" != "0" ]; then
	youtubedlInstalled="1"
	fi
fi
ffmpegInstalled=$(ffmpeg -h > /dev/null 2>&1; echo $?)
if [ "$ffmpegInstalled" != 1 ]; then
	if [ "$ffmpegInstalled" != 0 ]; then
	ffmpegInstalled="1"
	fi
fi
whichAreInstalled="$youtubedlInstalled""$ffmpegInstalled"
# Declare install functions:
function installDL {
		# Install youtube-dl
		echo 'You may be asked for your password multiple times during installation.'
		echo
		sleep 3
		echo 'Downloading youtube-dl...'
		#************** Generate latest youtube-dl download URL **************
		baseURL=$(curl -s https://yt-dl.org/downloads/latest)
		newURL=${baseURL##<!*f\=\"} #" <-- This commented quote is so that the code displays properly on GitHub
		newerURL=${newURL%%\">*l>} #" <--This commented quote is so that the code displays properly on GitHub
		progURL=$(echo $newerURL'/youtube-dl')
		#*********************************************************************
		# Use generated URL and store wether it was successful:
		usrLOCALcheck=$(cd /usr/local/bin > /dev/null 2>&1; echo $?)
		if [ "$usrLOCALcheck" == "1" ]; then
			sudo mkdir -p /usr/local/bin
		fi
		downloadAttempt=$(sudo curl $progURL -o /usr/local/bin/youtube-dl > /dev/null 2>&1; echo $?)
		if [ "$downloadAttempt" != "0" ]; then
			# Command came back something other than '0' which means something went wrong.
			# Prompt user with the command to download youtube-dl manually to see what goes wrong:
			echo
			echo 'Something went wrong.'
			echo 'Please install youtube-dl manually with these two commands to see what went wrong.'
			echo
			echo "sudo curl $progURL -o /usr/local/bin/youtube-dl"
			echo "sudo chmod a+x /usr/local/bin/youtube-dl"
			echo
			exit
		else
			# Download successful!
			# Now it is time to set permissions to make the downloaded binary usable:
			echo 'Installing...'
			installAttempt=$(sudo chmod a+x /usr/local/bin/youtube-dl > /dev/null 2>&1; echo $?)
			sleep 3
		fi
}
function installFFmpeg {
	# Install FFmpeg:
	echo
	echo 'To install FFmpeg please follow the instructions on the official FFmpeg website.'
	echo 'Would you like to open the download page for FFmpeg? [ (y)es, (n)o ]'
	read openFFmpegSite
	if [ "$openFFmpegSite" == "y" ]; then
		open 'http://www.ffmpeg.org/download.html'
	fi
	echo
	echo 'Please install FFmpeg and then run this script again.'
	echo
	exit
}
if [ "$whichAreInstalled" == "11" ]; then
	echo
	echo 'Looks like you have neither youtube-dl nor FFmpeg installed!'
	echo 'Both youtube-dl and FFmpeg are required to run Syphon.'
	echo 'Would you like to install (y)outube-dl, (f)fmpeg, or (b)oth?'
	read installWhich
	if [ "$installWhich" == "y" ]; then
		echo
		echo 'Although this script will continue without FFmpeg, the downloaded file(s) may not play.'
		echo 'Also, if both audio and video are downloaded the files will need to be combined into a single video file.'
		echo 'To avoid this check please add "F" without quotes to the media type option. Ex: -aF or -avF'
		echo
		echo 'Your download will begin shortly...'
		sleep 20
		installDL
	elif [ "$installWhich" == "f" ]; then
		installFFmpeg
	elif [ "$installWhich" == "b" ]; then
		installDL
		installFFmpeg
	fi
elif [ "$whichAreInstalled" == "10" ]; then
	echo
	echo 'It appears you do not have youtube-dl installed!'
	echo 'It is required to run Syphon.'
	echo 'Would you like to install it now? (y)es or (n)o'
	read installTube
	if [ "$installTube" == "y" ]; then
		installDL
	elif [ "$installTube" == "n" ]; then
		echo
		echo 'Syphon can not continue without youtube-dl. Please re-run Syphon to install.'
		echo 'Have a nice day :)'
		exit
	fi
elif [ "$whichAreInstalled" == "01" ]; then
	skipFFCheck=`echo $saveMediaType|awk '{print match($0,"F")}'`;
	if [ $skipFFCheck -gt 0 ];then
    	echo 'Skipping FFmpeg Check'
	else
		echo
		echo 'It appears you do not have FFmpeg installed!'
		echo 'Although it is not required to run Syphon, it is highly recommended.'
		echo 'FFmpeg is used after the download process to combine the audio and video into a single file.'
		echo 'Would you like to install it now? (y)es or (n)o'
		read installFF
		if [ "$installFF" == "y" ]; then
			installFFmpeg
		elif [ "$installFF" == "n" ]; then
			echo
			echo 'Although Syphon will run without FFmpeg the downloaded file(s) may not play.'
			echo 'Also, if both audio and video are downloaded the files are initially split'
			echo 'and will need to be combined into a single video file.'
			echo 'To avoid this check please add "F" without quotes to the media type option. Ex: -aF or -avF'
			echo
			echo 'Your download will begin shortly...'
			echo
			echo
			sleep 20
		fi
	fi
fi
#--------------------------------------------------------------------------------------------------------------------------------
#********************************************************************************************************************************
#--------------------------------------------------------------------------------------------------------------------------------
# Functions for creating a progress bar
#--------------------------------------
function myProgressBar() {
	theSource=$(youtube-dl -f $1 -g $myTubeURL)
	#echo $theSource
	sourceBytes=$(curl -sI $theSource | grep Content-Length | awk '{print $2}')
	#echo $sourceBytes
	theSourceStringSize=${#sourceBytes}
	#echo $theSourceStringSize
	newStringSize=${sourceBytes:0:$theSourceStringSize-1}
	newStringSize=$((newStringSize))
	#echo "$newStringSize"
	sleep 1
	#echo "Starting Bar"
	fileURL=$(ls *"$theVideoID"".$2"*)
	#echo $fileURL
	until [[ $theFileSize == $newStringSize ]]; do
	if [[ $(ls "$fileURL" > /dev/null 2>&1; echo $?) == "0" ]]; then
	theFileSize=$(stat -f%z "$fileURL")
	theFileSize=$((theFileSize))
	#echo "File is $theFileSize"
	theTotal=$((100 * theFileSize / newStringSize))
	#echo $theTotal
	if [[ $theTotal > 95 ]]; then
	break
	fi
	theBar=$(seq -f '#' -s '' $theTotal)
	echo -ne $theBar" ($theTotal%)\r\c"
	fi
	done
	echo $(seq -f '#' -s '' 100)" (100%)"
}
#--------------------------------------------------------------------------------------------------------------------------------
#********************************************************************************************************************************
#--------------------------------------------------------------------------------------------------------------------------------
# Create arrays that contain possible quality options.
# Arrays are ordered so that the highest possible options are tried frist.
# itag values from http://en.wikipedia.org/wiki/YouTube#Quality_and_codecs
audioOptions=("141" "140" "139")
videoOptions=("264" "137" "136" "135" "134" "133" "160")
# Double check input variables
if [[ "$saveMediaType" != "-"* ]] || [[  "$myTubeURL" != *"youtube.com"* ]]; then
	echo
	echo 'Usage: syphon [media type: -a, -v, -av] [YouTube URL]'
	exit
fi
#--------------------------------------------------------------------------------------------------------------------------------
#********************************************************************************************************************************
#--------------------------------------------------------------------------------------------------------------------------------
# Grab the complete list of available qualities. Also, Serves as a check for the videos availability:
#----------------------------------------------------------------------------------------------------
qualityCheck=$(youtube-dl -F $myTubeURL) # Add check for working url

theVideoID=${myTubeURL#h*=} # Removes all but ID from URL with http.
theVideoID=${theVideoID#www*=} #Removes all but ID from URL without http.
theVideoID=${theVideoID#you*=} #Removes all but ID from URL without http or www.
#--------------------------------------------------------------------------------------------------------------------------------
#********************************************************************************************************************************
#--------------------------------------------------------------------------------------------------------------------------------
# Begin code for downloading the audio from YouTube:
#--------------------------------------------------
getAudio=$(echo $saveMediaType|awk '{print match($0, "a")}')
if [[ "$getAudio" != "0" ]]; then
echo 'Finding the best audio...'
success=1
i=0
until [ $success == 0 ]; do
	if echo "$qualityCheck" | grep -q ${audioOptions[$i]}; then
    	#echo "matched with: ${audioOptions[$i]}";
    	success="0"
	else
    	#echo "no match";
    	i=$i+1
	fi
done
echo "Downloading the audio..."
youtube-dl -q -f ${audioOptions[$i]} $myTubeURL > /dev/null 2>&1 & myProgressBar ${audioOptions[$i]} m4a
fi
#--------------------------------------------------------------------------------------------------------------------------------
#********************************************************************************************************************************
#--------------------------------------------------------------------------------------------------------------------------------
# Begin code for downloading the video from YouTube
#--------------------------------------------------
getVideo=$(echo $saveMediaType|awk '{print match($0,"v")}')
if [[ "$getVideo" != "0" ]]; then
echo 'Finding the best video...'
success=1
i=0
until [ $success == 0 ]; do
	if echo "$qualityCheck" | grep -q ${videoOptions[$i]}; then
    	#echo "matched";
    	success="0"
	else
    	#echo "no match";
    	i=$i+1
	fi
done
echo "Downloading the video..."
youtube-dl -q -f ${videoOptions[$i]} $myTubeURL > /dev/null 2>&1 & myProgressBar ${videoOptions[$i]} mp4
fi
#--------------------------------------------------------------------------------------------------------------------------------
#********************************************************************************************************************************
#--------------------------------------------------------------------------------------------------------------------------------
# Begin code for handling downloaded files:
#-----------------------------------------
if [ "$ffmpegInstalled" == "0" ]; then
# Check if anything was downloaded:
if [[ $success == 0 ]]; then
	# Declare the variable for the files that have been downloaded:
	sleep 1
	echo 'Managing file(s)...'
	theVideoName=$(youtube-dl -e $myTubeURL)
	videoChar=(":" ";" "\\" "/" "," "!" "@" "$" "%" "^" "*" "_" "--" "---" "end")
	i=0
	until [ "${videoChar[$i]}" == "end" ]; do
	theVideoName=${theVideoName//"${videoChar[$i]}"/-}
	i=$i+1
	done
	#echo $theVideoID
	if [[ "$getAudio" != "0" ]]; then
		tubeAudioFile=$(ls *"$theVideoID"".m4a")
		#echo $tubeAudioFile
	fi
	if [[ "$getVideo" != "0" ]]; then
		tubeVideoFile=$(ls *"$theVideoID"".mp4")
		#echo $tubeVideoFile
	fi
	
	# Use FFmpeg to convert downloaded file(s) into something usable:
	echo 'Converting...'
	if [ "$getAudio" != "0" ] && [ "$getVideo" != "0" ]; then
		convertedFileName=$(echo $(youtube-dl -e $myTubeURL)".mp4")
		ffmpeg -loglevel quiet -i "$tubeAudioFile" -i "$tubeVideoFile" "$theVideoName"".mp4"
		echo 'Cleaning up the mess I made...'
		rm "$tubeAudioFile"
		rm "$tubeVideoFile"
	elif [[ "$getAudio" != "0" ]]; then
		convertedFileName=$(echo $(youtube-dl -e $myTubeURL)".m4a")
		ffmpeg -loglevel quiet -i "$tubeAudioFile" "$theVideoName"".m4a"
		echo 'Cleaning up the mess I made...'
		rm "$tubeAudioFile"
	elif [[ "$getVideo" != "0" ]]; then
		convertedFileName=$(echo $(youtube-dl -e $myTubeURL)".mp4")
		ffmpeg -loglevel quiet -i "$tubeVideoFile" "$theVideoName"".mp4"
		echo 'Cleaning up the mess I made...'
		rm "$tubeVideoFile"
	fi
fi
fi
