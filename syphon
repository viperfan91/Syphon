#!/bin/bash
# Syphon (A YouTube downloader powered by youtube-dl [http://rg3.github.io/youtube-dl/] and FFmpeg [http://www.ffmpeg.org])
# Script Written by Calvin Barrie (viperfan91) with contributions by Darrigan
#echo $#
# The command below displays every actions the script does. It's "verbose mode" if you will
#set -x
#███████╗██╗   ██╗██████╗ ██╗  ██╗ ██████╗ ███╗   ██╗
#██╔════╝╚██╗ ██╔╝██╔══██╗██║  ██║██╔═══██╗████╗  ██║
#███████╗ ╚████╔╝ ██████╔╝███████║██║   ██║██╔██╗ ██║
#╚════██║  ╚██╔╝  ██╔═══╝ ██╔══██║██║   ██║██║╚██╗██║
#███████║   ██║   ██║     ██║  ██║╚██████╔╝██║ ╚████║
#╚══════╝   ╚═╝   ╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═══╝

#--------------------------------------------------------------------------------------------------------------------------------
#********************************************************************************************************************************
#--------------------------------------------------------------------------------------------------------------------------------
# Declare functions
#------------------
# Define OS
#----------
whichOS=$(echo `uname`)
function echoThis () {
if [[ $whichOS == 'Darwin' ]]; then
	printf "$*\n"
elif [[ $whichOS == 'Linux' ]]; then
	echo -e "$*"
else
	echo "This is embarrassing. I haven't planned for this OS. Good Luck!"
fi
}
function displayLogo () {
	#echo "Logo Text: $2"
	#echo "Logo Wire: $3"
	logoText=$2
	logoWire=$3
	if [[ $1 == "full" || $1 == "1" ]]; then
	echoThis "\e[0;"${logoText}"m███████\e[0;"${logoWire}"m╗\e[0;"${logoText}"m██\e[0;"${logoWire}"m╗   \e[0;"${logoText}"m██\e[0;"${logoWire}"m╗\e[0;"${logoText}"m██████\e[0;"${logoWire}"m╗ \e[0;"${logoText}"m██\e[0;"${logoWire}"m╗  \e[0;"${logoText}"m██\e[0;"${logoWire}"m╗ \e[0;"${logoText}"m██████\e[0;"${logoWire}"m╗ \e[0;"${logoText}"m███\e[0;"${logoWire}"m╗   \e[0;"${logoText}"m██\e[0;"${logoWire}"m╗"
	fi
	if [[ $1 == "full" || $1 == "2" ]]; then
	echoThis "\e[0;"${logoText}"m██\e[0;"${logoWire}"m╔════╝╚\e[0;"${logoText}"m██\e[0;"${logoWire}"m╗ \e[0;"${logoText}"m██\e[0;"${logoWire}"m╔╝\e[0;"${logoText}"m██\e[0;"${logoWire}"m╔══\e[0;"${logoText}"m██\e[0;"${logoWire}"m╗\e[0;"${logoText}"m██\e[0;"${logoWire}"m║  \e[0;"${logoText}"m██\e[0;"${logoWire}"m║\e[0;"${logoText}"m██\e[0;"${logoWire}"m╔═══\e[0;"${logoText}"m██\e[0;"${logoWire}"m╗\e[0;"${logoText}"m████\e[0;"${logoWire}"m╗  \e[0;"${logoText}"m██\e[0;"${logoWire}"m║"
	fi
	if [[ $1 == "full" || $1 == "3" ]]; then
	echoThis "\e[0;"${logoText}"m███████\e[0;"${logoWire}"m╗ ╚\e[0;"${logoText}"m████\e[0;"${logoWire}"m╔╝ \e[0;"${logoText}"m██████\e[0;"${logoWire}"m╔╝\e[0;"${logoText}"m███████\e[0;"${logoWire}"m║\e[0;"${logoText}"m██\e[0;"${logoWire}"m║   \e[0;"${logoText}"m██\e[0;"${logoWire}"m║\e[0;"${logoText}"m██\e[0;"${logoWire}"m╔\e[0;"${logoText}"m██\e[0;"${logoWire}"m╗ \e[0;"${logoText}"m██\e[0;"${logoWire}"m║"
	fi
	if [[ $1 == "full" || $1 == "4" ]]; then
	echoThis "\e[0;"${logoWire}"m╚════\e[0;"${logoText}"m██\e[0;"${logoWire}"m║  ╚\e[0;"${logoText}"m██\e[0;"${logoWire}"m╔╝  \e[0;"${logoText}"m██\e[0;"${logoWire}"m╔═══╝ \e[0;"${logoText}"m██\e[0;"${logoWire}"m╔══\e[0;"${logoText}"m██\e[0;"${logoWire}"m║\e[0;"${logoText}"m██\e[0;"${logoWire}"m║   \e[0;"${logoText}"m██\e[0;"${logoWire}"m║\e[0;"${logoText}"m██\e[0;"${logoWire}"m║╚\e[0;"${logoText}"m██\e[0;"${logoWire}"m╗\e[0;"${logoText}"m██\e[0;"${logoWire}"m║"
	fi
	if [[ $1 == "full" || $1 == "5" ]]; then
	echoThis "\e[0;"${logoText}"m███████\e[0;"${logoWire}"m║   \e[0;"${logoText}"m██\e[0;"${logoWire}"m║   \e[0;"${logoText}"m██\e[0;"${logoWire}"m║     \e[0;"${logoText}"m██\e[0;"${logoWire}"m║  \e[0;"${logoText}"m██\e[0;"${logoWire}"m║╚\e[0;"${logoText}"m██████\e[0;"${logoWire}"m╔╝\e[0;"${logoText}"m██\e[0;"${logoWire}"m║ ╚\e[0;"${logoText}"m████\e[0;"${logoWire}"m║"
	fi
	if [[ $1 == "full" || $1 == "6" ]]; then
	echoThis "\e[0;"${logoWire}"m╚══════╝   ╚═╝   ╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═══╝\e[0m"
	fi
}
function logoColors () {
	for i in {30..37} {90..97}; do 
		for j in {30..37} {90..97}; do 
			displayLogo full $i $j
			echo "Text: $i Wire: $j"
		done
	done
}
function displayUsage () {
	echo
	displayLogo full $logoColors
	echo 'Usage: syphon [options] -v [YouTube URL/ID]'
	echo "Use -h to learn all the fun things you can do :)"
	echo
	exit
}
function displayHelp () {
	echoThis "\e[31;1mUsage:\e[0m	syphon [options] -v [YouTube URL/ID]\n"
	echo
	echoThis "\e[31;1mGeneral Options:\e[0m\n"
	echoThis "	-t or -T	Select which media type you would like to save."
	echoThis "				\e[31ma\e[0m - Download audio only."
	echoThis "				\e[31mv\e[0m - Download video only."
	echoThis "				\e[31mav\e[0m - Download both audio and video."
	echoThis "	-v or -V	YouTube Video URL or Video ID\n"
	echoThis "\e[31;1mAwesome Options:\e[0m\n"
	echoThis "	-c			Choose which two colors you would like the Syphon logo to be."
	echoThis "				The logo is split into two parts; Logo Text and Logo Wire."
	echoThis "				Example: -c \"34 93\""
	echoThis "				Each can be set to any number between 30-37 & 90-97."
	echo
	echoThis "				30\e[30m███████\e[0m 90\e[90m███████\e[0m"
	echoThis "				31\e[31m███████\e[0m 90\e[91m███████\e[0m"
	echoThis "				32\e[32m███████\e[0m 90\e[92m███████\e[0m"
	echoThis "				33\e[33m███████\e[0m 90\e[93m███████\e[0m"
	echoThis "				34\e[34m███████\e[0m 90\e[94m███████\e[0m"
	echoThis "				35\e[35m███████\e[0m 90\e[95m███████\e[0m"
	echoThis "				36\e[36m███████\e[0m 90\e[96m███████\e[0m"
	echoThis "				37\e[37m███████\e[0m 90\e[97m███████\e[0m"
	echo
	echoThis "				There are also format codes such as blinking or hidden."
	echoThis "				However, I will leave you to find those."
	echoThis "				To see all color combinations run \`syphon -C\` (without quotes)."
}	
#----------------
# Error functions
#-------------------------------------------------------------------------------------
# Error functions may be combined with other functions. 
# Example 1 will display, in red, the message provided as well as making it blink.
# Example 1: attentionGetter $(displayError "INSERT ERROR MESSAGE HERE")
# Example 2 will display the standard usage rules, but in red type.
# Example 2: displayError $(displayUsage)
# All functions after the first one called in the same command must be inclosed in $().
# However, you must be mindful of what is called inside the secondary functions as 
# actions commands, such as "exit" or "clear", will not work.
#-------------------------------------------------------------------------------------
function displayError () {
	echoThis "\n\e[31m$*\e[0m"
	echo
}
function attentionGetter () {
	echoThis "\e[5m$*\e[0m"
	echo
}
#------------------
# Install functions
#------------------
function installDL {
	# Install youtube-dl:
	echo 'You may be asked for your password multiple times during installation.'
	echo
	sleep 3
	echo 'Downloading youtube-dl...'
	#************** Generate latest youtube-dl download URL **************
	baseURL=$(curl -s https://yt-dl.org/downloads/latest)
	newURL=${baseURL##<!*f\=\"} #" <-- This commented quote is so that the code displays properly on GitHub
	newerURL=${newURL%%\">*l>} #" <--This commented quote is so that the code displays properly on GitHub
	progURL=$(echo $newerURL'/youtube-dl')
	#*********************************************************************
	# Use generated URL and store wether it was successful:
	usrLOCALcheck=$(cd /usr/local/bin > /dev/null 2>&1; echo $?)
	if [ "$usrLOCALcheck" == "1" ]; then
		sudo mkdir -p /usr/local/bin
	fi
	downloadAttempt=$(sudo curl $progURL -o /usr/local/bin/youtube-dl > /dev/null 2>&1; echo $?)
	if [ "$downloadAttempt" != "0" ]; then
		# Command came back something other than '0' which means something went wrong.
		# Prompt user with the command to download youtube-dl manually to see what goes wrong:
		echo
		echo 'Something went wrong.'
		echo 'Please install youtube-dl manually with these two commands to see what went wrong.'
		echo
		echo "sudo curl $progURL -o /usr/local/bin/youtube-dl"
		echo "sudo chmod a+x /usr/local/bin/youtube-dl"
		echo
		exit
	else
		# Download successful!
		# Now it is time to set permissions to make the downloaded binary usable:
		echo 'Installing...'
		installAttempt=$(sudo chmod a+x /usr/local/bin/youtube-dl > /dev/null 2>&1; echo $?)
		sleep 3
	fi
}
function installFFmpeg {
	# Install FFmpeg:
	echo
	echo 'To install FFmpeg please follow the instructions on the official FFmpeg website.'
	echo 'Would you like to open the download page for FFmpeg? [ (y)es, (n)o ]'
	read openFFmpegSite
	if [ "$openFFmpegSite" == "y" ]; then
		open 'http://www.ffmpeg.org/download.html'
	fi
	echo
	echo 'Please install FFmpeg and then run this script again.'
	echo
	exit
}
#--------------------
# Generate video name
#--------------------
function genVideoName {
	theVideoName=$(youtube-dl -e $myTubeURL)
	videoChar=(":" ";" "\\" "/" "," "!" "@" "$" "%" "^" "*" "_" "--" "---" "end")
	i=0
	until [ "${videoChar[$i]}" == "end" ]; do
		theVideoName=${theVideoName//"${videoChar[$i]}"/-}
		i=$i+1
	done
}
#--------------------
# Create progress bar
#--------------------
function myProgressBar () { # Usage: youtube-dl(process) & myProgressBar [itag#] [fileExt]
	theSource=$(youtube-dl -f $1 -g $myTubeURL)
	#echo $theSource
	sourceBytes=$(curl -sI $theSource | grep Content-Length | awk '{print $2}')
	#echo "sourceBytes: $sourceBytes"
	sourceSizeOrig=${#sourceBytes} # String Length
	#echo "sourceSizeOrig: $sourceSizeOrig"
	sourceSize=${sourceBytes:0:$sourceSizeOrig-1} # Keep all but last character
	sourceSize=$((sourceSize))
	#echo "sourceSize: $sourceSize"
	#sleep 1
	#echo "Starting Bar"
	if [[ $whichOS == 'Darwin' ]]; then
		theFileSize=1
		until [[ $theFileSize == $newStringSize ]]; do
			if [[ $(ls *"$theVideoID"".$2"* > /dev/null 2>&1; echo $?) == "0" ]]; then
				fileURL=$(ls *"$theVideoID"".$2"*)
				#echo $fileURL
				theFileSize=$(stat -f%z "$fileURL")
				theFileSize=$((theFileSize))
				#echo "File is $theFileSize"
				theTotal=$((100 * theFileSize / sourceSize))
				#echo $theTotal
				if [[ $theTotal == "0" ]]; then
					theTotal="1" # This fixes a display issue for when the progress is 0% - .9%
				fi
				if [[ $theTotal -ge 99 ]]; then
					sleep 2
					break
				fi
				theBar=$(seq -f '#' -s '' $theTotal)
				echo -ne $theBar" ($theTotal%)\r\c"	
			fi
		done
		#echo $(seq -f '#' -s '' 100)" (100%)"
	elif [[ $whichOS == 'Linux' ]]; then
		until [[ $theFileSize == $newStringSize ]]; do
			theFileSize=$(stat --format=%s "$fileURL")
			echo -ne "Downloading.  \r\c"
			sleep .1
			echo -ne "Downloading.. \r\c"
			sleep .1
			echo -ne "Downloading...\r\c"
			sleep .1
			echo -ne "Downloading   \r\c"
			sleep .1
		done
	fi
}
#--------------------------------------------------------------------------------------------------------------------------------
#********************************************************************************************************************************
#--------------------------------------------------------------------------------------------------------------------------------
# Define CL input
#----------------
while getopts ":t:T:v:V:hHuUc:C" OPTION; do
	case $OPTION in
        t|T) saveMediaType=$OPTARG;;
        v|V) givenVideo=$OPTARG;;
        h|H) displayHelp; exit;;
        c) logoColors=$OPTARG;;
        C) logoColors; exit;;
        #?) attentionGetter "$OPTARG is not a valid option or may need more commands. Please try again."; exit;;
    esac
done
URLorID=$(echo $givenVideo|awk '{print match($0, "youtube.com/watch")}')
if [[ $URLorID != "0" ]]; then
#echo "Full URL"
myTubeURL=$givenVideo
#echo $myTubeURL
else
#echo "ID only"
myTubeURL="www.youtube.com/watch?v=$2"
#echo $myTubeURL
fi
# Double check input variables
if [[ "$saveMediaType" == "" ]]; then
	saveMediaType="av"
fi
if [[  "$givenVideo" == "" ]] || [[ "$givenVideo" == *"-"* ]]; then
	displayUsage
fi
clear
echo 'Initializing...'
echo
sleep 1
#echo "███████╗██╗   ██╗██████╗ ██╗  ██╗ ██████╗ ███╗   ██╗"
displayLogo 1 $logoColors #$logoTextColor $logoWireColor
#--------------------------------------------------------------------------------------------------------------------------------
#********************************************************************************************************************************
#--------------------------------------------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------------------------------------------
#********************************************************************************************************************************
#--------------------------------------------------------------------------------------------------------------------------------
# Check to see if youtube-dl is installed.
# If it is not then ask if the user wants to install it:
#-------------------------------------------------------
#echo "██╔════╝╚██╗ ██╔╝██╔══██╗██║  ██║██╔═══██╗████╗  ██║"
displayLogo 2 $logoColors #$logoTextColor $logoWireColor
youtubedlInstalled=$(youtube-dl -h > /dev/null 2>&1; echo $?)
if [ "$youtubedlInstalled" != "1" ]; then
	if [ "$youtubedlInstalled" != "0" ]; then
		youtubedlInstalled="1"
	fi
fi
ffmpegInstalled=$(ffmpeg -h > /dev/null 2>&1; echo $?)
if [ "$ffmpegInstalled" != 1 ]; then
	if [ "$ffmpegInstalled" != 0 ]; then
		ffmpegInstalled="1"
	fi
fi
#echo "███████╗ ╚████╔╝ ██████╔╝███████║██║   ██║██╔██╗ ██║"
displayLogo 3 $logoColors #$logoTextColor $logoWireColor
whichAreInstalled="$youtubedlInstalled""$ffmpegInstalled"
if [ "$whichAreInstalled" == "11" ]; then
	echo
	echo 'Looks like you have neither youtube-dl nor FFmpeg installed!'
	echo 'Both youtube-dl and FFmpeg are required to run Syphon.'
	echo 'Would you like to install (y)outube-dl, (f)fmpeg, or (b)oth?'
	read installWhich
	if [ "$installWhich" == "y" ]; then
		echo
		echo 'Although this script will continue without FFmpeg, the downloaded file(s) may not play.'
		echo 'Also, if both audio and video are downloaded the files will need to be combined into a single video file.'
		echo 'To avoid this check please add "F" without quotes to the media type option. Ex: -aF or -avF'
		echo
		echo 'Your download will begin shortly...'
		sleep 20
		installDL
	elif [ "$installWhich" == "f" ]; then
		installFFmpeg
	elif [ "$installWhich" == "b" ]; then
		installDL
		installFFmpeg
	fi
elif [ "$whichAreInstalled" == "10" ]; then
	echo
	echo 'It appears you do not have youtube-dl installed!'
	echo 'It is required to run Syphon.'
	echo 'Would you like to install it now? (y)es or (n)o'
	read installTube
	if [ "$installTube" == "y" ]; then
		installDL
	elif [ "$installTube" == "n" ]; then
		echo
		echo 'Syphon can not continue without youtube-dl. Please re-run Syphon to install.'
		echo 'Have a nice day :)'
		exit
	fi
elif [ "$whichAreInstalled" == "01" ]; then
	skipFFCheck=`echo $saveMediaType|awk '{print match($0,"F")}'`;
	if [ $skipFFCheck -gt 0 ];then
    	echo 'Skipping FFmpeg Check'
	else
		echo
		echo 'It appears you do not have FFmpeg installed!'
		echo 'Although it is not required to run Syphon, it is highly recommended.'
		echo 'FFmpeg is used after the download process to combine the audio and video into a single file.'
		echo 'Would you like to install it now? (y)es or (n)o'
		read installFF
		if [ "$installFF" == "y" ]; then
			installFFmpeg
		elif [ "$installFF" == "n" ]; then
			echo
			echo 'Although Syphon will run without FFmpeg the downloaded file(s) may not play.'
			echo 'Also, if both audio and video are downloaded the files are initially split'
			echo 'and will need to be combined into a single video file.'
			echo 'To avoid this check please add "F" without quotes to the media type option. Ex: -aF or -avF'
			echo
			echo 'Your download will begin shortly...'
			echo
			echo
			sleep 20
		fi
	fi
fi
#--------------------------------------------------------------------------------------------------------------------------------
#********************************************************************************************************************************
#--------------------------------------------------------------------------------------------------------------------------------
# 
#
URLCheck=$(youtube-dl --get-id $myTubeURL > /dev/null 2>&1; echo $?)
if [[ $URLCheck != 0 ]]; then
attentionGetter $(displayError "It seems the URL or video ID does not work. Please check it and try again.")
exit
fi
#--------------------------------------------------------------------------------------------------------------------------------
#********************************************************************************************************************************
#--------------------------------------------------------------------------------------------------------------------------------
# Create arrays that contain possible quality options.
# Arrays are ordered so that the highest possible options are tried frist.
# itag values from http://en.wikipedia.org/wiki/YouTube#Quality_and_codecs
#-------------------------------------------------------------------------
audioOptions=("141" "140" "139")
videoOptions=("264" "137" "136" "135" "134" "133" "160")
#--------------------------------------------------------------------------------------------------------------------------------
#********************************************************************************************************************************
#--------------------------------------------------------------------------------------------------------------------------------
# Check to see if video is already downloaded in the current directory
#---------------------------------------------------------------------
#echo "╚════██║  ╚██╔╝  ██╔═══╝ ██╔══██║██║   ██║██║╚██╗██║"
displayLogo 4 $logoColors #$logoTextColor $logoWireColor
genVideoName
# Added check for ext specific results
if [[ $(ls *"$theVideoName""."* > /dev/null 2>&1; echo $?) == "0" ]]; then
	if [[ $saveMediaType == *"v"* ]]; then
		displayError "This video is already in this directory. Please move, delete, or rename the file if you wish to download it again."
	else
		displayError "This audio is already in this directory. Please move, delete, or rename the file if you wish to download it again."
	fi
	exit
fi
#--------------------------------------------------------------------------------------------------------------------------------
#********************************************************************************************************************************
#--------------------------------------------------------------------------------------------------------------------------------
# Grab the complete list of available qualities.
#-----------------------------------------------
#echo "███████║   ██║   ██║     ██║  ██║╚██████╔╝██║ ╚████║"
displayLogo 5 $logoColors #$logoTextColor $logoWireColor
qualityCheck=$(youtube-dl -F $myTubeURL)
theVideoID=${myTubeURL#h*=} # Removes all but ID from URL with http.
theVideoID=${theVideoID#www*=} #Removes all but ID from URL without http.
theVideoID=${theVideoID#you*=} #Removes all but ID from URL without http or www.
#--------------------------------------------------------------------------------------------------------------------------------
#********************************************************************************************************************************
#--------------------------------------------------------------------------------------------------------------------------------
# Begin code for downloading the audio from YouTube:
#--------------------------------------------------
#echo "╚══════╝   ╚═╝   ╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═══╝"
displayLogo 6 $logoColors #$logoTextColor $logoWireColor
getAudio=$(echo $saveMediaType|awk '{print match($0, "a")}')
if [[ "$getAudio" != "0" ]]; then
echo 'Finding the best audio...'
success=1
i=0
until [ $success == 0 ]; do
	if echo "$qualityCheck" | grep -q ${audioOptions[$i]}; then
    	#echo "matched with: ${audioOptions[$i]}";
    	success="0"
	else
    	#echo "no match";
    	i=$i+1
	fi
done
sleep 1
echo "Downloading the audio..."
youtube-dl -q -f ${audioOptions[$i]} $myTubeURL > /dev/null 2>&1 & myProgressBar ${audioOptions[$i]} m4a
echo $(seq -f '#' -s '' 100)" (100%)" # Makes sure it displays 100% when done
fi
#--------------------------------------------------------------------------------------------------------------------------------
#********************************************************************************************************************************
#--------------------------------------------------------------------------------------------------------------------------------
# Begin code for downloading the video from YouTube
#--------------------------------------------------
getVideo=$(echo $saveMediaType|awk '{print match($0,"v")}')
if [[ "$getVideo" != "0" ]]; then
echo 'Finding the best video...'
success=1
i=0
until [ $success == 0 ]; do
	if echo "$qualityCheck" | grep -q ${videoOptions[$i]}; then
    	#echo "matched";
    	success="0"
	else
    	#echo "no match";
    	i=$i+1
	fi
done
echo "Downloading the video..."
youtube-dl -q -f ${videoOptions[$i]} $myTubeURL > /dev/null 2>&1 & myProgressBar ${videoOptions[$i]} mp4
echo $(seq -f '#' -s '' 100)" (100%)" # Make sure it displays 100% when done
fi
#--------------------------------------------------------------------------------------------------------------------------------
#********************************************************************************************************************************
#--------------------------------------------------------------------------------------------------------------------------------
# Begin code for handling downloaded files:
#-----------------------------------------
if [ "$ffmpegInstalled" == "0" ]; then
# Check if anything was downloaded:
if [[ $success == 0 ]]; then
	# Declare the variable for the files that have been downloaded:
	sleep 1
	echo 'Managing file(s)...'
	if [[ "$getAudio" != "0" ]]; then
		tubeAudioFile=$(ls *"$theVideoID"".m4a")
		#echo $tubeAudioFile
	fi
	if [[ "$getVideo" != "0" ]]; then
		tubeVideoFile=$(ls *"$theVideoID"".mp4")
		#echo $tubeVideoFile
	fi
	
	# Use FFmpeg to convert downloaded file(s) into something usable:
	echo 'Converting...'
	if [ "$getAudio" != "0" ] && [ "$getVideo" != "0" ]; then
		convertedFileName=$(echo $(youtube-dl -e $myTubeURL)".mp4")
		ffmpeg -i "$tubeAudioFile" -i "$tubeVideoFile" "$theVideoName"".mp4"
		echo 'Cleaning up the mess I made...'
		rm "$tubeAudioFile"
		echo $tubeAudioFile
		rm "$tubeVideoFile"
		echo $tubeVideoFile
	elif [[ "$getAudio" != "0" ]]; then
		convertedFileName=$(echo $(youtube-dl -e $myTubeURL)".m4a")
		ffmpeg -loglevel quiet -i "$tubeAudioFile" "$theVideoName"".m4a"
		echo 'Cleaning up the mess I made...'
		rm "$tubeAudioFile"
	elif [[ "$getVideo" != "0" ]]; then
		convertedFileName=$(echo $(youtube-dl -e $myTubeURL)".mp4")
		ffmpeg -loglevel quiet -i "$tubeVideoFile" "$theVideoName"".mp4"
		echo 'Cleaning up the mess I made...'
		rm "$tubeVideoFile"
	fi
fi
fi